data <- read.csv("pml-training.csv")
data[,7:159] <- apply(data[,7:159], 2, function(x){as.numeric(as.character(x))})
data <- data[,-1:-7]
count_nas <- apply(data, 2, function(var){
sum(is.na(var))/length(var)*100
})
data <- data[-which(count_nas>90)]
vars <- strsplit(names(data[,-53]), "_")
var1 <- unlist(lapply(vars, function(x){x[1]}))
var2 <- unlist(lapply(vars, function(x){x[2]}))
knitr::kable(table(var1, var2), caption="Overview of independent variables.")
library(caret)
set.seed(666)
trainIndex = createDataPartition(data$classe, p=0.1, list=FALSE)
training = data[trainIndex,]
validation = data[-trainIndex,]
library(randomForest)
mtry <- tuneRF(training[,-53], training[,53], stepFactor=1.5, trace=F)
mtry_min <- mtry[which.min(mtry)/2]
fit <- randomForest(classe~., data=training, ntree=100, mtry=mtry_min, prox=T)
pred <- predict(fit, validation)
accuracy <- confusionMatrix(pred, validation$classe)
install.packages("e1071")
fit <- randomForest(classe~., data=training, ntree=100, mtry=mtry_min, prox=T)
pred <- predict(fit, validation)
accuracy <- confusionMatrix(pred, validation$classe)
par(mar=c(4,2,1,3), xpd=TRUE)
plot(pred, validation$classe, pch=".", col=rainbow(5), xlab="Prediction", ylab="Testing")
legend(1.3,.37, legend=LETTERS[1:5], fill=rainbow(5), box.col=0)
par(mar=c(4,4,1,1))
varImpPlot(fit, pch=19, cex=.7, main="")
data <- data[,-1:-7]
nas_count <- apply(data, 2, function(var){
sum(is.na(var))/length(var)*100
})
data <- data[-which(nas_count>90)]
Vars <- strsplit(names(data[,-53]), "_")
Var_1 <- unlist(lapply(Vars, function(x){x[1]}))
Var_2 <- unlist(lapply(Vars, function(x){x[2]}))
knitr::kable(table(Var_1, Var_2), caption="Overview of independent variables.")
data <- data[,-1:-7]
nas_count <- apply(data, 2, function(var){
sum(is.na(var))/length(var)*100
})
data <- data[-which(nas_count>90)]
Vars <- strsplit(names(data[,-53]), "_")
Var_1 <- unlist(lapply(Vars, function(x){x[1]}))
Var_2 <- unlist(lapply(Vars, function(x){x[2]}))
knitr::kable(table(Var_1, Var_2), caption="Overview of independent variables.")
Vars <- strsplit(names(data[,-53]), "_")
Var_1 <- unlist(lapply(Vars, function(x){x[1]}))
Var_2 <- unlist(lapply(Vars, function(x){x[2]}))
knitr::kable(table(Var_1, Var_2), caption="Overview of independent variables.")
Vars <- strsplit(names(data[,-53]), "_")
var1 <- unlist(lapply(Vars, function(x){x[1]}))
var2 <- unlist(lapply(Vars, function(x){x[2]}))
knitr::kable(table(var1, var2), caption="Overview of independent variables.")
vars <- strsplit(names(data[,-53]), "_")
var1 <- unlist(lapply(vars, function(x){x[1]}))
var2 <- unlist(lapply(vars, function(x){x[2]}))
knitr::kable(table(var1, var2), caption="Overview of independent variables.")
data <- data[,-1:-7]
nas_count <- apply(data, 2, function(var){
sum(is.na(var))/length(var)*100
})
data <- data[-which(nas_count>90)]
vars <- strsplit(names(data[,-53]), "_")
var1 <- unlist(lapply(vars, function(x){x[1]}))
var2 <- unlist(lapply(vars, function(x){x[2]}))
knitr::kable(table(var1, var2), caption="Overview of independent variables.")
data <- read.csv("pml-training.csv")
data[,7:159] <- apply(data[,7:159], 2, function(x){as.numeric(as.character(x))})
data <- data[,-1:-7]
count_nas <- apply(data, 2, function(var){
sum(is.na(var))/length(var)*100
})
data <- data[-which(count_nas>90)]
vars <- strsplit(names(data[,-53]), "_")
var1 <- unlist(lapply(vars, function(x){x[1]}))
var2 <- unlist(lapply(vars, function(x){x[2]}))
knitr::kable(table(var1, var2), caption="Overview of independent variables.")
vars <- strsplit(names(data[,-53]), "_")
var_1 <- unlist(lapply(vars, function(x){x[1]}))
var_2 <- unlist(lapply(vars, function(x){x[2]}))
knitr::kable(table(var_1, var_2), caption="Overview of Independent Variables.")
library(caret)
set.seed(666)
trainIndex = createDataPartition(data$classe, p=0.1, list=FALSE)
training = data[trainIndex,]
validation = data[-trainIndex,]
library(randomForest)
mtry <- tuneRF(training[,-53], training[,53], stepFactor=1.5, trace=F)
mtry_min <- mtry[which.min(mtry)/2]
fit <- randomForest(classe~., data=training, ntree=100, mtry=mtry_min, prox=T)
pred <- predict(fit, validation)
accuracy <- confusionMatrix(pred, validation$classe)
par(mar=c(4,2,1,3), xpd=TRUE)
plot(pred, validation$classe, pch=".", col=rainbow(5), xlab="Prediction", ylab="Testing")
legend(1.3,.37, legend=LETTERS[1:5], fill=rainbow(5), box.col=0)
par(mar=c(4,4,1,1))
varImpPlot(fit, pch=19, cex=.7, main="")
#Prediction Assignment Submission
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("submission/problem_id_",i,".txt")
write.table(x[i], file=filename, quote=FALSE, row.names=FALSE, col.names=FALSE)
}
}
pml_write_files(answers)
par(mar=c(4,4,1,1))
varImpPlot(fit, pch=19, cex=.7, main="")
for(i in 1:n){
filename = paste0("submission/problem_id_",i,".txt")
write.table(x[i], file=filename, quote=FALSE, row.names=FALSE, col.names=FALSE)
}
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("submission/problem_id_",i,".txt")
write.table(x[i], file=filename, quote=FALSE, row.names=FALSE, col.names=FALSE)
}
}
pml_write_files(answers)
answers <- predict(modFitCFS$finalModel,
newdata = testing[, c(8:11, 37:49, 60:68, 84:86,
102, 113:124, 140,
151:160)])
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("submission/problem_id_",i,".txt")
write.table(x[i], file=filename, quote=FALSE, row.names=FALSE, col.names=FALSE)
}
}
pml_write_files(answers)
answers <- predict(modFitCFS$finalModel,
newdata = testing[, c(8:11, 37:49, 60:68, 84:86,
102, 113:124, 140,
151:160)])
answers <- predict(fit$finalModel,
newdata = testing[, c(8:11, 37:49, 60:68, 84:86,
102, 113:124, 140,
151:160)])
data <- read.csv("pml-training.csv")
data[,7:159] <- apply(data[,7:159], 2, function(x){as.numeric(as.character(x))})
data <- read.csv("pml-training.csv")
data[,7:159] <- apply(data[,7:159], 2, function(x){as.numeric(as.character(x))})
library(caret)
library(rattle)
install.packages('rattle')
install.packages('rattle')
install.packages('rattle')
install.packages('rattle')
install.packages('rattle')
install.packages('rattle')
install.packages('rattle')
install.packages('rattle')
install.packages('rattle')
install.packages('rattle')
install.packages('rattle')
install.packages('rattle')
install.packages('rattle')
install.packages('rattle')
install.packages('rattle')
install.packages('rattle')
install.packages('rattle')
install.packages('rattle')
library(caret)
library(rattle)
TrainData <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"),header=TRUE)
dim(TrainData)
